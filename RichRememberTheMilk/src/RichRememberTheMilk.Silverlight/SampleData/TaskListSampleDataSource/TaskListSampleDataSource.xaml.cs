//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.TaskListSampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class TaskListSampleDataSource { }
#else

	public class TaskListSampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public TaskListSampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/RichRememberTheMilk.Silverlight;component/SampleData/TaskListSampleDataSource/TaskListSampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Tasks _Tasks = new Tasks();

		public Tasks Tasks
		{
			get
			{
				return this._Tasks;
			}
		}
	}

	public class TasksItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Description = string.Empty;

		public string Description
		{
			get
			{
				return this._Description;
			}

			set
			{
				if (this._Description != value)
				{
					this._Description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}

		private double _Priority = 0;

		public double Priority
		{
			get
			{
				return this._Priority;
			}

			set
			{
				if (this._Priority != value)
				{
					this._Priority = value;
					this.OnPropertyChanged("Priority");
				}
			}
		}
	}

	public class Tasks : System.Collections.ObjectModel.ObservableCollection<TasksItem>
	{ 
	}
#endif
}
