<#@ assembly name="$(SolutionDir)..\..\tools\TinyMVVM\DotNet4\TinyMVVM.dll" #>
<#@ import namespace="TinyMVVM.DSL.TextParser" #>
<#@ import namespace="TinyMVVM.SemanticModel.MVVM" #>

<#+
// <copyright file="ViewModel.tt" company="eXPerience">
//  Copyright © eXPerience. All Rights Reserved.
// </copyright>

public class ViewModelTemplate : Template
{
	public string File;
	public string Namespace;

	public override string TransformText()
	{
		Parser parser = new Parser();
		ModelSpecification modelSpec = parser.Parse(Code.FromFile(File));

	#>

using TinyMVVM.Repositories;
using TinyMVVM.Framework.Services;
<#+ foreach (string Using in modelSpec.Usings) {#>
using <#= Using #>;
<#+ }#>
using <#= Namespace#>.Repositories;

namespace <#= Namespace #>
{
<#+ foreach (ViewModel viewModel in modelSpec.ViewModels) {#>
	public partial class <#= viewModel.Name#> : <#= viewModel.Parent#>
	{
		//State
	<#+ foreach (ViewModelProperty property in viewModel.Properties) {#>
<#+ foreach (string attribute in property.Attributes) {#>
	<#= attribute #>
	<#+ }#>
	<#+ if (property.IsObservable) {#>
public <#= property.Type#> <#= property.Name#>
		{
			get { return _<#= property.Name#>; }
			set
			{
				if (value != _<#= property.Name#>)
				{
					_<#= property.Name#> = value;
					TriggerPropertyChanged("<#= property.Name#>");

					/*UIInvoker.Invoke(() =>
					{
						_<#= property.Name#> = value;
						TriggerPropertyChanged("<#= property.Name#>");
					});*/
				}
			}
		}
		private <#= property.Type#> _<#= property.Name#>;

	<#+ }#>
<#+ if (!property.IsObservable){#>
public <#= property.Type#> <#= property.Name#> { get; set; } 
	<#+ }#>
<#+ }#>

		
		//Commands
	<#+ foreach (ViewModelCommand command in viewModel.Commands) {#>
	public DelegateCommand <#= command.Name#> { get; set; }
	<#+ }#>
	
		public <#= viewModel.Name#>()
		{
			//ConfigureRepository();

	<#+ foreach (ViewModelProperty property in viewModel.Properties) {#>
	<#+ if (!property.IsPrimitiveType &&
			!property.Type.StartsWith("I")) {#>
	<#= property.Name#> = new <#= property.Type#>();
	<#+ }#>
<#+ }#>

	<#+ foreach (ViewModelCommand command in viewModel.Commands) {#>
		<#= command.Name#> = new DelegateCommand();
	<#+ }#>
		
			ApplyDefaultConventions();
		}

		private void ConfigureRepository()
		{
			ConfigureDependencies(config => 
				config.Bind<IRepository<<#= viewModel.Name#>>>().To<<#= viewModel.Name#>Repository>());
		}
	}
		
<#+ }#>
}<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
