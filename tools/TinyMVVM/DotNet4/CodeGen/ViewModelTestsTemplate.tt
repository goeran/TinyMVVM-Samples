<#@ assembly name="$(SolutionDir)\TinyMVVM\$(OutDir)\TinyMVVM.dll" #>
<#@ import namespace="TinyMVVM.DSL.TextParser" #>
<#@ import namespace="TinyMVVM.SemanticModel" #>

<#+
// <copyright file="ViewModelTestsTemplate.tt" company="eXPerience">
//  Copyright © eXPerience. All Rights Reserved.
// </copyright>

public class ViewModelTestsTemplate : Template
{
	public string File;
	public string UsingNamespace;
	public string Namespace;

	public override string TransformText()
	{
		Parser parser = new Parser();
		ModelSpecification modelSpec = parser.Parse(Code.FromFile(File));
#>

using System;
using NUnit.Framework;
using <#= UsingNamespace#>;
using TinyMVVM.Framework.Testing;
<#+ foreach (string Using in modelSpec.Usings) {#>
using <#= Using #>;
<#+ }#>

namespace <#= Namespace #>
{
<#+ foreach (ViewModel viewModel in modelSpec.ViewModels){#>
	public abstract class <#= viewModel.Name #>TestContext : TestContext
	{
		protected <#= viewModel.Name#> viewModel;

		[SetUp]
		public void Setup()
		{
			ServiceLocator.SetLocator(ServiceLocatorForTesting.GetServiceLocator());
			
			Context();
		}

		public abstract void Context();

		public void Given_<#= viewModel.Name#>_is_created()
		{
			viewModel = new <#= viewModel.Name#>();
		}

		public void And_<#= viewModel.Name#>_is_created()
		{
			viewModel = new <#= viewModel.Name#>();
		}
		
	<#+ foreach (ViewModelProperty property in viewModel.Properties){#>
	public void And_<#= property.Name#>_is_set(<#= property.Type#> value)
		{
			viewModel.<#= property.Name#> = value;
		}

	<#+ if (property.Type.Contains("Collection")) { 
		String possibleTypeName = property.Name.Substring(0, property.Name.Length - 1); 
	#>
	public void When_add_<#= possibleTypeName#>(Action unitOfWork)
		{
			unitOfWork.Invoke();
		}
	<#+ } #>

	<#+ }#>	
	
		public void And_<#= viewModel.Name#>_PropertyChangeRecording_is_Started()
		{
			viewModel.PropertyChangeRecorder.Start();
		}

	<#+ foreach (ViewModelProperty property in viewModel.Properties){#>
	public void When_<#= property.Name#>_is_set(<#= property.Type#> value)
		{
			viewModel.<#= property.Name#> = value;
		}
		
	<#+ }#>
	
		public void When_<#= viewModel.Name#>_is_spawned()
		{
			viewModel = new <#= viewModel.Name#>();
		} 
		
	<#+ foreach (ViewModelCommand command in viewModel.Commands) {#>
	public void And_<#= command.Name#>_Command_is_executed()
		{
			viewModel.<#= command.Name#>.Execute(null);
		}

		public void When_execute_<#= command.Name#>_Command()
		{
			viewModel.<#= command.Name#>.Execute(null);
		}
	<#+ }#>
		
		public void And(string description, Action unitOfWork)
		{
			unitOfWork.Invoke();
		}

		public void When(string description, Action unitOfWork)
		{
			unitOfWork.Invoke();
		}
}

<#+ }#>
}

<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
