<#@ assembly name="$(SolutionDir)..\..\tools\TinyMVVM\DotNet4\TinyMVVM.dll" #>
<#@ import namespace="TinyMVVM.DSL.TextParser" #>
<#@ import namespace="TinyMVVM.SemanticModel.MVVM" #>

<#+
// <copyright file="ViewModelTestsTemplate.tt" company="eXPerience">
//  Copyright © eXPerience. All Rights Reserved.
// </copyright>

public class ViewModelTestsTemplate : Template
{
	public string File;
	public string UsingNamespace;
	public string Namespace;

	public override string TransformText()
	{
		Parser parser = new Parser();
		ModelSpecification modelSpec = parser.Parse(Code.FromFile(File));
#>

using System;
using NUnit.Framework;
using Moq;
using <#= UsingNamespace#>;
using TinyMVVM.Repositories;
using TinyMVVM.Framework.Testing;
using TinyMVVM.Framework.Testing.Services;
using TinyMVVM.Framework.Services;
<#+ foreach (string Using in modelSpec.Usings) {#>
using <#= Using #>;
<#+ }#>

namespace <#= Namespace #>
{
	public abstract class ScenarioClass<T> where T: class
	{
        protected T Given { get { return this as T; } }
        protected T And { get { return this as T; } }
        protected T When { get { return this as T; } }
        protected T Then { get { return this as T; } }
	}

<#+ foreach (ViewModel viewModel in modelSpec.ViewModels){#>
	public abstract class <#= viewModel.Name#>TestScenario<T> : ScenarioClass<T>
		where T: class
	{
		protected <#= viewModel.Name#> viewModel;

	<#+ foreach (ViewModel vm in modelSpec.ViewModels) {#>
	protected Mock<IRepository<<#= vm.Name#>>> <#= vm.Name#>RepositoryFake = new Mock<IRepository<<#= vm.Name#>>>();
	<#+ }#>

		[SetUp]
		public void Setup()
		{
			<#= viewModel.Name#>.RemoveAllGlobalDependencies();
			<#= viewModel.Name#>.ConfigureGlobalDependencies(config =>
			{
				config.Bind<IUIInvoker>().To<UIInvokerForTesting>();

		<#+ foreach (ViewModel vm in modelSpec.ViewModels) {#>
		config.Bind<IRepository<<#= vm.Name#>>>().ToInstance(<#= vm.Name#>RepositoryFake.Object);
		<#+ }#>

			});

			Before();
		}

		protected virtual void Before()
		{
		}

		[TearDown]
		public void TearDown()
		{
			After();
			<#= viewModel.Name#>.RemoveAllGlobalDependencies();
		}

		protected virtual void After()
		{
		}

		//Given
		public void dependencies_are_configured(Action<DependencyConfigSemantics> configAction)
		{
			<#= viewModel.Name#>.ConfigureGlobalDependencies(configAction);
		}

		//Given & And
		public void <#= viewModel.Name#>_is_created()
		{
			viewModel = new <#= viewModel.Name#>();
		}

		//And
	<#+ foreach (ViewModelProperty property in viewModel.Properties){#>
	public void <#= property.Name#>_is_set(<#= property.Type#> value)
		{
			viewModel.<#= property.Name#> = value;
		}

	<#+ if (property.Type.Contains("Collection")) { 
		String possibleTypeName = property.Name.Substring(0, property.Name.Length - 1); 
	#>
	//When
	public void add_<#= possibleTypeName#>(Action unitOfWork)
		{
			unitOfWork.Invoke();
		}
	<#+ } #>

	<#+ }#>	

		//And
		public void <#= viewModel.Name#>_PropertyChangeRecording_is_Started()
		{
			viewModel.PropertyChangeRecorder.Start();
		}

		//When
		public void <#= viewModel.Name#>_is_spawned()
		{
			viewModel = new <#= viewModel.Name#>();
		} 
		
		//Whens
	<#+ foreach (ViewModelCommand command in viewModel.Commands) {#>
	public void <#= command.Name#>_Command_is_executed()
		{
			viewModel.<#= command.Name#>.Execute(null);
		}

		public void execute_<#= command.Name#>_Command()
		{
			viewModel.<#= command.Name#>.Execute(null);
		}
	<#+ }#>
	}

<#+ }#>
}

<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
